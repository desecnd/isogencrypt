#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/evp.h>
#include <openssl/sha.h>

#include "fp2.h"
#include "proto_msidh.h"

enum MSIDH_LEVEL {
    MSIDH_T100 = 0,
    MSIDH_T150,
    MSIDH_T200,
    MSIDH_NLEVELS,
};

static const struct msidh_const_data MSIDH_PARAMS[MSIDH_NLEVELS] = {
    {
        .t        = 100,
        .a_str    = "6",
        .xP_str   = "676782264267647704374841078583377129084920411368462533161975883862106168381374621964630435711031310199890121669098735728601662060520619786791770866788191063158114472432232379973464280756719439507936879154054541559903789696*i + 282112944123676408609495261586712812203713408247395183175137461096334546904020125022139160812389963422190307194936726367122106029835150671283058126220448180766790907504639045538223643393944677488032699431588822694429908807",
        .xQ_str   = "32367356782289105770954104254110078052637346772802896266479595133195546236262364823552492761142608582981335317969767811450296025879972269381965001149304673765189124838440280486311825139786957074937789460893921127939478578*i + 790659894435988541838965364489716509500495044678106771763637330713687360367120363885943452946719921091998096686199913863567843743937032074428640648704582813280464335938644280877068848855009972350768489454580631049447855480", 
        .xR_str   = "555681514866784111235320795562790330048828033500308950298140884480073206729285147934444814579066077321513364911998778834660073778528074528072850931277906825763407742457542084527734140433441001321709155289976095024762678146*i + 699784705541245626746972809851120549881104679311434317817339274196308856576144399491580834186237888201147647408270897063702387883947094884736964822165723421108946083854470305412641278697960284272294864849781531780078369445",
    }, 
    {
        .t        = 150,
        .a_str    = "6",
        .xP_str   = "38875101656589648074540889910158094028510354678103911345587150585505582321958785242578068841595926468776902993905782278711459828352808401074007024768734493956027686753776545305203217410254294148326169375684899078440384234175756666655153521359202042259976400413297182402912704933974574098807509601500188392422202689698657990244848858480834839236586646737900814079*i + 107153396793510161619651452752089550257388420764403939887802142485265972168464258683338821676946678212829727414336952653688233513853236529963063136943306372810613152597147607326829968525615995725087266666044875121111398689164969491845996362384179851063147840123976290690096867520820962968145047164616725223497475226679580560037878147912556227730093546152779110299",
        .xQ_str   = "112269117766658518833498996477632954497157525964135019776205011274161646594839595755042054367951407616880190382239684532547765511411458849298061637321548652703682818238733478093606128836026111620800995105789392688317009570685013041740162900039152683905953907261695157159133359739450405779246676476931971591065173710130908366648331797537988861820880532386558525833*i + 34560455866836114426562689879142194399413850715831630713142018212530727341701552090789737951555475745185639251911540733068361511652252213915337433650936374445346829820767353206435654122486142650097112392989595915316599419074683460921036153688836239799943520449363855320328040242503416907964962351715561984973226889143328125260496479613850850383305122763935142522", 
        .xR_str = "99487938342176484265664069603880954017636756939215978799606306939498797139561043036050248068550063966676311751551183007821220824915160838270151020831032463458496119938708491502504531799228825215480529771890968046616295341317398649833219951751795460039472925949346436001112033029293773704009793329533256549253123268758867467669245651725146510431975875138857494723*i + 42685977788369376479658648011386232252320858325005278593667111140204080229682097000395890568723410422951802115621510176518589516796869340420855105447095652662223148438390159553720105097869175439244988947993494591217090904906611672875077598187889725705263601070249189415307567694303474802814273828628214285601662017831048084954698647038566625545361916985972654317",
    }, 
    {
        .t        = 200,
        .a_str    = "6",
        .xP_str   = "5843773199883532261091408613132557220910169524885001066258866181869338391639667425530406351954596723492167273427889690927138673277489006848423621328488125587941956014023877824418397973195960359844382383879865538282418948817443087832748798023432540988421619488919567625863943198802440158672152238435287766668744885836656537301721695977724540448864266501159755731533595426748345890199098833992286838805093817759482709300311173140715592674298943744049247717267578544111947507108591572754951560698883231009396150755455*i + 867943604704408770151328411539419048048476093626516591039549431244957057727900923084255373715335413652817331708844894375516820026576664575275375137749009639749904832600825175984518485240328414379833664162133654429195386393222908066842598235087695074471326523070136256058676409034346119198511777814334832261314755525865938330836289802764988075612651298783784305469759107260396980484029124119902759706780238069850162678882427158119296177514608581981679529632917485904935607448792706043742782736728943403699647376053",
        .xQ_str   = "1064724593663474599196253300271744881993259043865483596110994438771193266829468267590857189610503461986019175313854062979169056764511666053020442270886146259630040586504072831547486565869863345661013318831178770176791280396728067776653961637223537231040547358072197222996502148132023395063752223463150181579421955136679490834172571734253350545982561981217397341675269280283788498365921618505141995372830952823494310965236273076220534423846939608439625999407058834853091572839526663736294663086348485434839188739684*i + 13742627834908760450980555680172787064780613254865151839722947664702285271390589512898171390794605717248126051464456546264701905428687259350782267665206343237019850359106800329475207377991152676016981787735884328402893572648145362520141017096270079298842839648472485917778351034316012907699260334769222588787879132816297450503183680979437711044987140391059584109571020677527844383061800974264554099118242690035541267570698761212885829648092473318125620360478568156926808214826195602643516273139766256047564379910681", 
        .xR_str = "1388304435245115378201579542431877140693524792314939291531357618079220898123231963090760198587400583832694183252603735105600401032416779561558515719039898794959371019160826209187280642168268673905659699866512924528918865644165667691334073388332734104788953117347779668978752131007921773873862118320962498938603244917415151523073062858196199337149131242957917875635491050345390529398933491753155035593906434679153511526649456236452768228497078174387217618664500261479539704092522676765321354977199019161778241639132*i + 17080705928885868111731260284272585421268637724320330115358960387158737405868742835847410521430347329543388359710574827596721661647618537644496982900416381180370896473372714135938682218757265162498468279833764493454687312081804126597253970617602003174360131405721636258680233408280396945510996755673357249616618848447753854513419433600317584962995689623227225342728081533594087636601386942565322483304219091367741643573552764472945597890485851399795034436502707138649853036202008097234357172361724972451034629668750",
    }, 
};

int send_u32(int fd, uint32_t val) {
    uint32_t val_be = htonl(val);
    // Send the u32 big-endian value to the other party
    if (write(fd, &val_be, sizeof(val_be)) != sizeof(val_be)) {
        return -1;
    }
    return 0;
}

int recv_u32(int fd, uint32_t *val) {
    uint32_t val_be; 
    if (read(fd, &val_be, sizeof(val_be)) != sizeof(val_be)) {
        return -1;
    }
    *val = ntohl(val_be);
    return 0;
}

int send_fp2(int fd, fp2_t x) {
    size_t buff_size = fp2_write_size(x);
    char *buffer = malloc(buff_size);
    if (buffer == NULL) { 
        return -1;
    }

    fp2_write(x, buffer);
    int ret = send_u32(fd, buff_size);

    // Something went wrong
    if (ret == -1) {
        free(buffer);
        return ret;
    } 

    // Send fp2 stored as "b*i + a" decimal representation
    if (write(fd, buffer, buff_size) != (ssize_t) buff_size) {
        ret = -1;
    }

    free(buffer);
    return ret;
}

int recv_fp2(int fd, fp2_t x) {
    uint32_t buff_size;
    if (0 != recv_u32(fd, &buff_size)) {
        return -1;
    }

    char * buffer = malloc(buff_size);
    if (buffer == NULL) {
        return -1;
    }

    if (read(fd, buffer, buff_size) != buff_size) {
        free(buffer);
        return -1;
    }

    int ret = fp2_set_str(x, buffer);
    free(buffer);
    return ret;
}

int recv_msidh_data(int fd, struct msidh_data *md) {
    if (0 != recv_u32(fd, &md->t)) return -1;
    if (0 != recv_fp2(fd, md->a)) return -1;
    if (0 != recv_fp2(fd, md->xP)) return -1;
    if (0 != recv_fp2(fd, md->xQ)) return -1;
    if (0 != recv_fp2(fd, md->xR)) return -1;
    return 0;
}

int send_msidh_data(int fd, struct msidh_data *md) {
    if (0 != send_u32(fd, md->t)) return -1;
    if (0 != send_fp2(fd, md->a)) return -1;
    if (0 != send_fp2(fd, md->xP)) return -1;
    if (0 != send_fp2(fd, md->xQ)) return -1;
    if (0 != send_fp2(fd, md->xR)) return -1;
    return 0;
}

int msidh_handshake(int fd, int is_client, unsigned char shared_key[SHA256_DIGEST_LENGTH], enum MSIDH_LEVEL level) {
    if ((unsigned) level >= MSIDH_NLEVELS) {
        fprintf(stderr, "Invalid MSIDH level: %u, maximum allowed is: %u\n", level, MSIDH_NLEVELS); 
        return -1;
    }

    // Public params
    struct msidh_data params, pk_self, pk_other;
    msidh_data_init(&params);
    msidh_data_init(&pk_self);
    msidh_data_init(&pk_other);

    // Parse the given MSIDH level
    const struct msidh_const_data* mcd = &MSIDH_PARAMS[level];
    params.t = mcd->t;
    fp2_set_str(params.a, mcd->a_str);
    fp2_set_str(params.xP, mcd->xP_str);
    fp2_set_str(params.xQ, mcd->xQ_str);
    fp2_set_str(params.xR, mcd->xR_str);

    // Alice: Send public key information
    struct msidh_state msidh;
    msidh_state_init(&msidh);

    msidh_state_prepare(&msidh, &params, is_client);
    msidh_get_pubkey(&msidh, &pk_self); 
    int ret = 0;

    if (is_client) {
        ret = send_msidh_data(fd, &pk_self);
        if (ret == 0) ret = recv_msidh_data(fd, &pk_other);
    } else {
        ret = recv_msidh_data(fd, &pk_other);
        if (ret == 0) ret = send_msidh_data(fd, &pk_self);
    }

    // If there is a mismatch in parameters we need to abort the connection
    if (pk_self.t != pk_other.t) { 
        ret = -1;
    }

    // Jump directly to exit to free the resources
    if (ret == -1) {
        goto exit;
    }

    msidh_key_exchange(&msidh, &pk_other); 

    // Convert obtained j-invariant into SHA256 digest
    size_t buff_size = fp2_write_size(msidh.j_inv);
    char *buffer = malloc(buff_size);
    fp2_write(msidh.j_inv, buffer);
    SHA256((unsigned char *) buffer, buff_size, shared_key);
    free(buffer);

exit:
    // Clear all and return
    msidh_state_clear(&msidh);
    msidh_data_clear(&params);
    msidh_data_clear(&pk_self);
    msidh_data_clear(&pk_other);
    return ret;
}

